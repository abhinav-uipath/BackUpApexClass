({
    showToast : function(title,msg,type) {
        console.log('title '+title);
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            title : title,
            message:msg,
            duration:' 5000',
            key: 'info_alt',
            type: type,
            mode: 'dismissible'
            
        });
        toastEvent.fire();
    },

    convertListToCSV: function (component, list) {

        var csvStringResult, counter, keys, columnDivider, lineDivider;
        var csvHeader = '*** Allocate Report *** ';

        // check if "list" parameter is null, then return from function
        if (list == null || !list.length) {
            return null;
        }
        // store ,[comma] in columnDivider variabel for sparate CSV values and
        // for start next line use '\n' [new line] in lineDivider varaible
        columnDivider = ',';
        lineDivider =  '\n';

        // in the keys valirable store fields API Names as a key
        // this labels use in CSV file header
        keys = ['Id', 'Colour', 'Matched Deposit', 'Matched customer number','Matched dispute ref', 'Reference1', 'Reference2', 'Reference3',
                'Reference4', 'Reference5', 'Amount', 'Deposit amount', 'Dispute amount', 'Account balance','Matched Amber Values', 'File Name'];

        csvStringResult = csvHeader + lineDivider;
        csvStringResult += keys.join(columnDivider);
        csvStringResult += lineDivider;

        for(var i=0; i < list.length; i++){
            counter = 0;

            for(var sTempkey in keys) {
                var skey = keys[sTempkey] ;

                // add , [comma] after every String value,. [except first]
                if(counter > 0){
                    csvStringResult += columnDivider;
                }
                csvStringResult += '"'+ list[i][skey]+'"';

                counter++;

            } // inner for loop close
            csvStringResult += lineDivider;
        }// outer main for loop close

        // return the CSV format String
        return csvStringResult;
    },

    callReturnInboundReports : function (component, event){
        component.set("v.checkedCount",0);
        var action = component.get("c.returnInboundReports");

        var splitList = component.get("v.splitList");
        splitList.length =splitList.length+1;
        component.set("v.splitList",splitList);

      	action.setParams({
             amount : 0,
             isFilter : false,
             filterType : '',
             startCreatedDate : null,
             endCreatedDate : null,
             selectedRecordType : component.get("v.selectedRecordType")
         });
        
        action.setCallback(this, function(response) {
            component.set("v.spinner",true);
            var state = response.getState();
            if (state === "SUCCESS") {
                var result =response.getReturnValue();
                
                component.set("v.inboundReportsList" ,result);
                component.set("v.spinner",false);
                
            }
            else if (state === "INCOMPLETE") {
                component.set("v.spinner",false);
                showToast('Warning!','Process incomplete','warning'); 
                
                // alert('INCOMPLETE');
            }
                else if (state === "ERROR") {
                    component.set("v.spinner",false);
                    var errors = response.getError();
                    if (errors) {
                        if (errors[0] && errors[0].message) {
                            showToast('Error!',"Error message: " +  errors[0].message,'error');
                            // component.set("v.spinner",false);
                            
                            //  alert("Error message: " +  errors[0].message);
                        }
                    } else {
                        showToast('Error!','Unknown error','error');
                        //  component.set("v.spinner",false);
                        
                        //  alert("Unknown error");
                    }
                }
        });
        
        $A.enqueueAction(action);
    }
})

